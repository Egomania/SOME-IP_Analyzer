<rules>

	<rule used="true">
		<type>Protocol Behaviour</type>	
		<description>An Error was sent back on another Error.</description>
		<listener>SomeIP</listener>
		<query>
SELECT * FROM SomeIPPacket(type = ERROR).win:length(1) s1 
WHERE NOT EXISTS (SELECT * FROM SomeIPPacket(type = REQUEST OR type = NOTIFICATION OR type = REQUEST_NO_RETURN).win:length(100) s2 
WHERE s1.serviceID = s2.serviceID
AND s1.methodID = s2.methodID
AND s1.requestID = s2.requestID
AND s1.srcIP = s2.dstIP
AND s1.dstIP = s2.srcIP
AND s1.srcMAC = s2.dstMAC
AND s1.dstMAC = s2.srcMAC
AND s1.srcPort = s2.dstPort
AND s1.dstPort = s2.srcPort
AND s1.timestamp &gt; s2.timestamp
AND s2.timestamp &lt; s1.timestamp + 5000000)

		</query>
		<output>ErrorOnError</output>
	</rule>

	<rule used="true">
		<type>Protocol Behaviour</type>	
		<description>An Error was sent back on an Event (Notification or Request_No_Return).</description>
		<listener>SomeIP</listener>
		<query>
SELECT * FROM SomeIPPacket(type = ERROR).win:length(1) s1  
WHERE NOT EXISTS (SELECT * FROM SomeIPPacket(type = REQUEST OR type = ERROR).win:length(100) s2 
WHERE s1.serviceID = s2.serviceID
AND s1.methodID = s2.methodID
AND s1.requestID = s2.requestID
AND s1.srcIP = s2.dstIP
AND s1.dstIP = s2.srcIP
AND s1.srcMAC = s2.dstMAC
AND s1.dstMAC = s2.srcMAC
AND s1.srcPort = s2.dstPort
AND s1.dstPort = s2.srcPort
AND s1.timestamp &gt; s2.timestamp
AND s2.timestamp &lt; s1.timestamp + 5000000)
		</query>
		<output>ErrorOnEvent</output>
	</rule>

	<rule used="true">
		<type>Helper Function</type>	
		<description>Create a variable.</description>
		<listener>CreateStatement</listener>
		<query>create variable long minValue</query>
		<output>NewVar</output>
	</rule>

	<rule used="true">
		<type>Helper Function</type>	
		<description>Create a variable.</description>
		<listener>CreateStatement</listener>
		<query>

		@Priority(1)
		ON SomeIPPacket(type = RESPONSE) as s1
		SET minValue = (
			select min(s.timestamp) FROM SomeIPPacket(type = REQUEST).win:length(100) s 
			WHERE s1.serviceID = s.serviceID
			AND s1.methodID = s.methodID
			AND s1.requestID = s.requestID
			AND s1.srcIP = s.dstIP
			AND s1.dstIP = s.srcIP
			AND s1.srcMAC = s.dstMAC
			AND s1.dstMAC = s.srcMAC
			AND s1.srcPort = s.dstPort
			AND s1.dstPort = s.srcPort
			AND s1.timestamp &gt; s.timestamp
			AND s.timestamp &lt; s1.timestamp + 5000000
		) 

		</query>
		<output>NewVar</output>
	</rule>
	

	<rule used="true">
		<type>Protocol Behaviour</type>	
		<description>Response without Request.</description>
		<listener>SomeIP</listener>
		<query>
		@Priority(2)
SELECT * FROM SomeIPPacket(type = RESPONSE).win:length(1) s1  
WHERE 
		NOT EXISTS 
			(
			SELECT * FROM SomeIPPacket(type = REQUEST).win:length(100) s2 
			WHERE s1.serviceID = s2.serviceID
			AND s1.methodID = s2.methodID
			AND s1.requestID = s2.requestID
			AND s1.srcIP = s2.dstIP
			AND s1.dstIP = s2.srcIP
			AND s1.srcMAC = s2.dstMAC
			AND s1.dstMAC = s2.srcMAC
			AND s1.srcPort = s2.dstPort
			AND s1.dstPort = s2.srcPort
			AND s1.timestamp &gt; s2.timestamp
			AND s2.timestamp &lt; s1.timestamp + 5000000
			)
	OR 
	(
		(
		select count(*) from SomeIPPacket(type = REQUEST).win:length(50) s2 
		WHERE s1.serviceID = s2.serviceID
		AND s1.methodID = s2.methodID
		AND s1.requestID = s2.requestID
		AND s1.srcIP = s2.dstIP
		AND s1.dstIP = s2.srcIP
		AND s1.srcMAC = s2.dstMAC
		AND s1.dstMAC = s2.srcMAC
		AND s1.srcPort = s2.dstPort
		AND s1.dstPort = s2.srcPort
		AND s1.timestamp &gt; s2.timestamp
		AND s2.timestamp &lt; s1.timestamp + 5000000
		) 
	= 

		(
		select count(*) from SomeIPPacket(type = RESPONSE OR type = ERROR).win:length(50) s2 
		WHERE s1.serviceID = s2.serviceID
		AND s1.methodID = s2.methodID
		AND s1.requestID = s2.requestID
		AND s1.srcIP = s2.srcIP
		AND s1.dstIP = s2.dstIP
		AND s1.srcMAC = s2.srcMAC
		AND s1.dstMAC = s2.dstMAC
		AND s1.srcPort = s2.srcPort
		AND s1.dstPort = s2.dstPort
		AND s1.timestamp &gt; s2.timestamp
		AND s2.timestamp &lt; s1.timestamp + 5000000
		AND s2.timestamp &gt; minValue
		)
	)
		</query>
		<output>MissingRequest</output>
	</rule>

	<rule used="true">
		<type>Protocol Behaviour</type>	
		<description>Request without Response.</description>
		<listener>SomeIP</listener>
		<query>
SELECT * FROM SomeIPPacket.win:length(2) s1, SomeIPPacket.win:length(2) s2, SomeIPPacket(type = REQUEST).win:length(100) s3 
WHERE s1.timestamp &gt; s2.timestamp
AND s3.timestamp &lt; (s1.timestamp - 6000000) 
AND s3.timestamp &gt; (s2.timestamp - 6000000)
AND NOT EXISTS 
	(SELECT * FROM SomeIPPacket(type = RESPONSE OR type = ERROR).win:length(50) s4 
	WHERE 
	s3.serviceID = s4.serviceID
	AND s3.methodID = s4.methodID
	AND s3.requestID = s4.requestID
	AND s3.srcIP = s4.dstIP
	AND s3.dstIP = s4.srcIP
	AND s3.srcMAC = s4.dstMAC
	AND s3.dstMAC = s4.srcMAC
	AND s3.srcPort = s4.dstPort
	AND s3.dstPort = s4.srcPort
	AND s3.timestamp &lt; s4.timestamp)

		</query>
		<output>MissingResponse</output>
	</rule>

	<rule used="true">
		<type>Helper Funtion</type>	
		<description>Create a new Table for IP to ID.</description>
		<listener>CreateStatement</listener>
		<query>create table clientMappingIP (client_ip int primary key, client_id int) </query>
		<output>Create a new Table with IP as PK.</output>
	</rule>	

	<rule used="true">
		<type>Helper Funtion</type>	
		<description>Create a new Table for ID to IP.</description>
		<listener>CreateStatement</listener>
		<query>create table clientMappingID (client_id int primary key, client_ip int) </query>
		<output>Create a new Table with ID as PK.</output>
	</rule>	

	<rule used="true">
		<type>Helper Funtion</type>	
		<description>Check for changed IP</description>
		<listener>CreateStatement</listener>
		<query>

ON SomeIPPacket s MERGE clientMappingIP cm WHERE 
(
	s.srcIP in (select client_ip from clientMappingIP)
	AND 
	(s.srcIP in (clientIPs))
	AND
	(s.srcIP = cm.client_ip AND s.clientID != cm.client_id) 
) 
WHEN 
	MATCHED 
	THEN UPDATE SET cm.client_id = surf.SomeIPAnalyzer.SomeIPAnalyzer.setClientID(s) 

WHEN 
	NOT MATCHED 
	AND s.srcIP not in (select client_ip from clientMappingIP) 
	AND s.srcIP in (clientIPs) 
	THEN INSERT into clientMappingIP select s.srcIP as client_ip, s.clientID as client_id

		</query>
		<output>Create a new Table.</output>
	</rule>	

	<rule used="true">
		<type>Behaviour Requirements</type>	
		<description>Check for changed ID</description>
		<listener>CreateStatement</listener>
		<query>
ON SomeIPPacket s MERGE clientMappingID cm WHERE 
(
	s.clientID in (select client_id from clientMappingID)
	AND 
	(s.srcIP in (clientIPs))
	AND
	(s.srcIP != cm.client_ip AND s.clientID = cm.client_id) 
) 
WHEN 
	MATCHED 
	THEN UPDATE SET cm.client_ip = surf.SomeIPAnalyzer.SomeIPAnalyzer.setClientIP(s) 

WHEN 
	NOT MATCHED 
	AND s.clientID not in (select client_id from clientMappingID) 
	AND s.srcIP in (clientIPs) 
	THEN INSERT into clientMappingID select s.srcIP as client_ip, s.clientID as client_id

		</query>
		<output>Merges incomming data into table.</output>
	</rule>	

	<rule used="true">
		<type>Malformedness</type>	
		<description>A malformed Packet with wrong INTERFACE was sent.</description>
		<listener>MalformedPacket</listener>
		<query>SELECT * FROM SomeIPPacket.win:length(1) WHERE interfaceVersion != INTERFACE</query>
		<output>WrongINTERFACE</output>
	</rule>

	<rule used="true">
		<type>Timing Constraints</type>	
		<description>To many Notifications were sent.</description>
		<listener>SomeIP</listener>
		<query>
		SELECT * FROM SomeIPPacket(clientID = 5, methodID = 546, serviceID = 4096).win:length(1) as s1  
		WHERE 
		EXISTS
			(
				SELECT * FROM SomeIPPacket(clientID = 5, methodID = 546, serviceID = 4096).win:length(2) as s2
				WHERE s2.timestamp &gt; s1.timestamp - 4900000
				AND s2.timestamp &lt; s1.timestamp
			)

		</query>
		<output>TimingConfusionForClientID5SomeIPClient0x5000Service1000Method222</output>
	</rule>


	<rule used="true">
		<type>Timing Constraints</type>	
		<description>To many Notifications were sent.</description>
		<listener>SomeIP</listener>
		<query>
		SELECT * FROM SomeIPPacket(clientID = 2, methodID = 4095, serviceID = 4096).win:length(1) as s1  
		WHERE 
		EXISTS
			(
				SELECT * FROM SomeIPPacket(clientID = 2, methodID = 4095, serviceID = 4096).win:length(2) as s2
				WHERE s2.timestamp &gt; s1.timestamp - 4900000
				AND s2.timestamp &lt; s1.timestamp
			)

		</query>
		<output>TimingConfusionForClientID2SomeIPClient0x3000Service1000Methodfff</output>
	</rule>

	<rule used="true">
		<type>Timing Constraints</type>	
		<description>To many Notifications were sent.</description>
		<listener>SomeIP</listener>
		<query>
		SELECT * FROM SomeIPPacket(clientID = 8, methodID = 2, serviceID = 12288).win:length(1) as s1  
		WHERE 
		EXISTS
			(
				SELECT * FROM SomeIPPacket(clientID = 8, methodID = 2, serviceID = 12288).win:length(2) as s2
				WHERE s2.timestamp &gt; s1.timestamp - 4900000
				AND s2.timestamp &lt; s1.timestamp
			)

		</query>
		<output>TimingConfusionForClientID8SomeIPClient0xC010Service3000Method2</output>
	</rule>

	<rule used="true">
		<type>Timing Constraints</type>	
		<description>To many Notifications were sent.</description>
		<listener>SomeIP</listener>
		<query>
		SELECT * FROM SomeIPPacket(clientID = 5, methodID = 2, serviceID = 12288).win:length(1) as s1  
		WHERE 
		EXISTS
			(
				SELECT * FROM SomeIPPacket(clientID = 5, methodID = 2, serviceID = 12288).win:length(2) as s2
				WHERE s2.timestamp &gt; s1.timestamp - 4900000
				AND s2.timestamp &lt; s1.timestamp
			)

		</query>
		<output>TimingConfusionForClientID8SomeIPClient0x5000Service3000Method2</output>
	</rule>

	<rule used="true">
		<type>Timing Constraints</type>	
		<description>To many Notifications were sent.</description>
		<listener>SomeIP</listener>
		<query>
		SELECT * FROM SomeIPPacket(clientID = 7, methodID = 2, serviceID = 16384).win:length(1) as s1  
		WHERE 
		EXISTS
			(
				SELECT * FROM SomeIPPacket(clientID = 7, methodID = 2, serviceID = 16384).win:length(2) as s2
				WHERE s2.timestamp &gt; s1.timestamp - 4900000
				AND s2.timestamp &lt; s1.timestamp
			)

		</query>
		<output>TimingConfusionForClientID7SomeIPClient0xC000Service4000Method2</output>
	</rule>

</rules>


